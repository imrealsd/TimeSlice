
mini_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002558  08002558  00003558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002570  08002570  0000401c  2**0
                  CONTENTS
  4 .ARM          00000008  08002570  08002570  00003570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002578  08002578  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002578  08002578  00003578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800257c  0800257c  0000357c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08002580  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000401c  2**0
                  CONTENTS
 10 .bss          000000b4  2000001c  2000001c  0000401c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d0  200000d0  0000401c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c8e4  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cfc  00000000  00000000  00010930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00012630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000974  00000000  00000000  00013250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207f2  00000000  00000000  00013bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db1f  00000000  00000000  000343b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca9b0  00000000  00000000  00041ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c885  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000322c  00000000  00000000  0010c8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0010faf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002540 	.word	0x08002540

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08002540 	.word	0x08002540

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fa1c 	bl	80008f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f808 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f88e 	bl	80005e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004c8:	f000 f862 	bl	8000590 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  timeSlice_initScheduler();
 80004cc:	f001 ffe4 	bl	8002498 <timeSlice_initScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <main+0x18>

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b094      	sub	sp, #80	@ 0x50
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0320 	add.w	r3, r7, #32
 80004de:	2230      	movs	r2, #48	@ 0x30
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 ffff 	bl	80024e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	f107 030c 	add.w	r3, r7, #12
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f8:	2300      	movs	r3, #0
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	4b22      	ldr	r3, [pc, #136]	@ (8000588 <SystemClock_Config+0xb4>)
 80004fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000500:	4a21      	ldr	r2, [pc, #132]	@ (8000588 <SystemClock_Config+0xb4>)
 8000502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000506:	6413      	str	r3, [r2, #64]	@ 0x40
 8000508:	4b1f      	ldr	r3, [pc, #124]	@ (8000588 <SystemClock_Config+0xb4>)
 800050a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800050c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	4b1c      	ldr	r3, [pc, #112]	@ (800058c <SystemClock_Config+0xb8>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a1b      	ldr	r2, [pc, #108]	@ (800058c <SystemClock_Config+0xb8>)
 800051e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	4b19      	ldr	r3, [pc, #100]	@ (800058c <SystemClock_Config+0xb8>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000530:	2302      	movs	r3, #2
 8000532:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000534:	2301      	movs	r3, #1
 8000536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000538:	2310      	movs	r3, #16
 800053a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800053c:	2300      	movs	r3, #0
 800053e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	f107 0320 	add.w	r3, r7, #32
 8000544:	4618      	mov	r0, r3
 8000546:	f000 fcd5 	bl	8000ef4 <HAL_RCC_OscConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000550:	f000 f888 	bl	8000664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000554:	230f      	movs	r3, #15
 8000556:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f000 ff38 	bl	80013e4 <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800057a:	f000 f873 	bl	8000664 <Error_Handler>
  }
}
 800057e:	bf00      	nop
 8000580:	3750      	adds	r7, #80	@ 0x50
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800
 800058c:	40007000 	.word	0x40007000

08000590 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000594:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <MX_USART1_UART_Init+0x4c>)
 8000596:	4a12      	ldr	r2, [pc, #72]	@ (80005e0 <MX_USART1_UART_Init+0x50>)
 8000598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <MX_USART1_UART_Init+0x4c>)
 800059c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <MX_USART1_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <MX_USART1_UART_Init+0x4c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <MX_USART1_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <MX_USART1_UART_Init+0x4c>)
 80005b6:	220c      	movs	r2, #12
 80005b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <MX_USART1_UART_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <MX_USART1_UART_Init+0x4c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005c6:	4805      	ldr	r0, [pc, #20]	@ (80005dc <MX_USART1_UART_Init+0x4c>)
 80005c8:	f001 fbc0 	bl	8001d4c <HAL_UART_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005d2:	f000 f847 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000038 	.word	0x20000038
 80005e0:	40011000 	.word	0x40011000

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_GPIO_Init+0x54>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a11      	ldr	r2, [pc, #68]	@ (8000638 <MX_GPIO_Init+0x54>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_GPIO_Init+0x54>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN USART1_MspInit 0 */

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000614:	23c0      	movs	r3, #192	@ 0xc0
 8000616:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4619      	mov	r1, r3
 8000628:	4804      	ldr	r0, [pc, #16]	@ (800063c <MX_GPIO_Init+0x58>)
 800062a:	f000 faad 	bl	8000b88 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800062e:	bf00      	nop
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40020000 	.word	0x40020000

08000640 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d101      	bne.n	8000656 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000652:	f000 f973 	bl	800093c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40010000 	.word	0x40010000

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <Error_Handler+0x8>

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <HAL_MspInit+0x4c>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800067e:	4a0f      	ldr	r2, [pc, #60]	@ (80006bc <HAL_MspInit+0x4c>)
 8000680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000684:	6453      	str	r3, [r2, #68]	@ 0x44
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <HAL_MspInit+0x4c>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <HAL_MspInit+0x4c>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069a:	4a08      	ldr	r2, [pc, #32]	@ (80006bc <HAL_MspInit+0x4c>)
 800069c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <HAL_MspInit+0x4c>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	@ 0x28
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a19      	ldr	r2, [pc, #100]	@ (8000744 <HAL_UART_MspInit+0x84>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d12c      	bne.n	800073c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <HAL_UART_MspInit+0x88>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ea:	4a17      	ldr	r2, [pc, #92]	@ (8000748 <HAL_UART_MspInit+0x88>)
 80006ec:	f043 0310 	orr.w	r3, r3, #16
 80006f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <HAL_UART_MspInit+0x88>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f6:	f003 0310 	and.w	r3, r3, #16
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <HAL_UART_MspInit+0x88>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a10      	ldr	r2, [pc, #64]	@ (8000748 <HAL_UART_MspInit+0x88>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <HAL_UART_MspInit+0x88>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800071a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800071e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800072c:	2307      	movs	r3, #7
 800072e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <HAL_UART_MspInit+0x8c>)
 8000738:	f000 fa26 	bl	8000b88 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	@ 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40011000 	.word	0x40011000
 8000748:	40023800 	.word	0x40023800
 800074c:	40020000 	.word	0x40020000

08000750 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	@ 0x30
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000758:	2300      	movs	r3, #0
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	4b2e      	ldr	r3, [pc, #184]	@ (8000820 <HAL_InitTick+0xd0>)
 8000766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000768:	4a2d      	ldr	r2, [pc, #180]	@ (8000820 <HAL_InitTick+0xd0>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000770:	4b2b      	ldr	r3, [pc, #172]	@ (8000820 <HAL_InitTick+0xd0>)
 8000772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800077c:	f107 020c 	add.w	r2, r7, #12
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f001 f80c 	bl	80017a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800078c:	f000 fff6 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8000790:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000794:	4a23      	ldr	r2, [pc, #140]	@ (8000824 <HAL_InitTick+0xd4>)
 8000796:	fba2 2303 	umull	r2, r3, r2, r3
 800079a:	0c9b      	lsrs	r3, r3, #18
 800079c:	3b01      	subs	r3, #1
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007a0:	4b21      	ldr	r3, [pc, #132]	@ (8000828 <HAL_InitTick+0xd8>)
 80007a2:	4a22      	ldr	r2, [pc, #136]	@ (800082c <HAL_InitTick+0xdc>)
 80007a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007a6:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <HAL_InitTick+0xd8>)
 80007a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000828 <HAL_InitTick+0xd8>)
 80007b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <HAL_InitTick+0xd8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <HAL_InitTick+0xd8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c0:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <HAL_InitTick+0xd8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80007c6:	4818      	ldr	r0, [pc, #96]	@ (8000828 <HAL_InitTick+0xd8>)
 80007c8:	f001 f81e 	bl	8001808 <HAL_TIM_Base_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80007d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d11b      	bne.n	8000812 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80007da:	4813      	ldr	r0, [pc, #76]	@ (8000828 <HAL_InitTick+0xd8>)
 80007dc:	f001 f86e 	bl	80018bc <HAL_TIM_Base_Start_IT>
 80007e0:	4603      	mov	r3, r0
 80007e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80007e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d111      	bne.n	8000812 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80007ee:	2019      	movs	r0, #25
 80007f0:	f000 f9bc 	bl	8000b6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b0f      	cmp	r3, #15
 80007f8:	d808      	bhi.n	800080c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80007fa:	2200      	movs	r2, #0
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	2019      	movs	r0, #25
 8000800:	f000 f998 	bl	8000b34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000804:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <HAL_InitTick+0xe0>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	e002      	b.n	8000812 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800080c:	2301      	movs	r3, #1
 800080e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000812:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000816:	4618      	mov	r0, r3
 8000818:	3730      	adds	r7, #48	@ 0x30
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	431bde83 	.word	0x431bde83
 8000828:	20000080 	.word	0x20000080
 800082c:	40010000 	.word	0x40010000
 8000830:	20000004 	.word	0x20000004

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <NMI_Handler+0x4>

0800083c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <MemManage_Handler+0x4>

0800084c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <UsageFault_Handler+0x4>

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000872:	f001 f893 	bl	800199c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000080 	.word	0x20000080

08000880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	@ (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008a8:	f7ff ffea 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	@ (80008e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	@ (80008f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d2:	f001 fe11 	bl	80024f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fdef 	bl	80004b8 <main>
  bx  lr    
 80008da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80008e8:	08002580 	.word	0x08002580
  ldr r2, =_sbss
 80008ec:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80008f0:	200000d0 	.word	0x200000d0

080008f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <HAL_Init+0x40>)
 8000902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000908:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_Init+0x40>)
 800090e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	@ (8000938 <HAL_Init+0x40>)
 800091a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800091e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f8fc 	bl	8000b1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	200f      	movs	r0, #15
 8000928:	f7ff ff12 	bl	8000750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff fea0 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023c00 	.word	0x40023c00

0800093c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_IncTick+0x20>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_IncTick+0x24>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4413      	add	r3, r2
 800094c:	4a04      	ldr	r2, [pc, #16]	@ (8000960 <HAL_IncTick+0x24>)
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000008 	.word	0x20000008
 8000960:	200000c8 	.word	0x200000c8

08000964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <HAL_GetTick+0x14>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	200000c8 	.word	0x200000c8

0800097c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000984:	f7ff ffee 	bl	8000964 <HAL_GetTick>
 8000988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000994:	d005      	beq.n	80009a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <HAL_Delay+0x44>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4413      	add	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009a2:	bf00      	nop
 80009a4:	f7ff ffde 	bl	8000964 <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d8f7      	bhi.n	80009a4 <HAL_Delay+0x28>
  {
  }
}
 80009b4:	bf00      	nop
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008

080009c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <__NVIC_GetPriorityGrouping+0x18>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	f003 0307 	and.w	r3, r3, #7
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	db0b      	blt.n	8000a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 021f 	and.w	r2, r3, #31
 8000a40:	4907      	ldr	r1, [pc, #28]	@ (8000a60 <__NVIC_EnableIRQ+0x38>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	095b      	lsrs	r3, r3, #5
 8000a48:	2001      	movs	r0, #1
 8000a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000e100 	.word	0xe000e100

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	@ (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	@ (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	@ 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	@ 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ff4c 	bl	80009c4 <__NVIC_SetPriorityGrouping>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b46:	f7ff ff61 	bl	8000a0c <__NVIC_GetPriorityGrouping>
 8000b4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	6978      	ldr	r0, [r7, #20]
 8000b52:	f7ff ffb1 	bl	8000ab8 <NVIC_EncodePriority>
 8000b56:	4602      	mov	r2, r0
 8000b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff80 	bl	8000a64 <__NVIC_SetPriority>
}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff54 	bl	8000a28 <__NVIC_EnableIRQ>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
 8000ba2:	e16b      	b.n	8000e7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f040 815a 	bne.w	8000e76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d005      	beq.n	8000bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d130      	bne.n	8000c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68da      	ldr	r2, [r3, #12]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	f003 0201 	and.w	r2, r3, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d017      	beq.n	8000c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d123      	bne.n	8000ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	08da      	lsrs	r2, r3, #3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3208      	adds	r2, #8
 8000c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	f003 0307 	and.w	r3, r3, #7
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	69b9      	ldr	r1, [r7, #24]
 8000cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0203 	and.w	r2, r3, #3
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 80b4 	beq.w	8000e76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b60      	ldr	r3, [pc, #384]	@ (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	4a5f      	ldr	r2, [pc, #380]	@ (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8000e98 <HAL_GPIO_Init+0x310>)
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a52      	ldr	r2, [pc, #328]	@ (8000e9c <HAL_GPIO_Init+0x314>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d02b      	beq.n	8000dae <HAL_GPIO_Init+0x226>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a51      	ldr	r2, [pc, #324]	@ (8000ea0 <HAL_GPIO_Init+0x318>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d025      	beq.n	8000daa <HAL_GPIO_Init+0x222>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a50      	ldr	r2, [pc, #320]	@ (8000ea4 <HAL_GPIO_Init+0x31c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d01f      	beq.n	8000da6 <HAL_GPIO_Init+0x21e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4f      	ldr	r2, [pc, #316]	@ (8000ea8 <HAL_GPIO_Init+0x320>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d019      	beq.n	8000da2 <HAL_GPIO_Init+0x21a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4e      	ldr	r2, [pc, #312]	@ (8000eac <HAL_GPIO_Init+0x324>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d013      	beq.n	8000d9e <HAL_GPIO_Init+0x216>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4d      	ldr	r2, [pc, #308]	@ (8000eb0 <HAL_GPIO_Init+0x328>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00d      	beq.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4c      	ldr	r2, [pc, #304]	@ (8000eb4 <HAL_GPIO_Init+0x32c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x20e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4b      	ldr	r2, [pc, #300]	@ (8000eb8 <HAL_GPIO_Init+0x330>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_GPIO_Init+0x20a>
 8000d8e:	2307      	movs	r3, #7
 8000d90:	e00e      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d92:	2308      	movs	r3, #8
 8000d94:	e00c      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d96:	2306      	movs	r3, #6
 8000d98:	e00a      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e008      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d9e:	2304      	movs	r3, #4
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000da2:	2303      	movs	r3, #3
 8000da4:	e004      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000dae:	2300      	movs	r3, #0
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	f002 0203 	and.w	r2, r2, #3
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	4093      	lsls	r3, r2
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc0:	4935      	ldr	r1, [pc, #212]	@ (8000e98 <HAL_GPIO_Init+0x310>)
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dce:	4b3b      	ldr	r3, [pc, #236]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000df2:	4a32      	ldr	r2, [pc, #200]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df8:	4b30      	ldr	r3, [pc, #192]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e1c:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e22:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e46:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e70:	4a12      	ldr	r2, [pc, #72]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	2b0f      	cmp	r3, #15
 8000e80:	f67f ae90 	bls.w	8000ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3724      	adds	r7, #36	@ 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	40020c00 	.word	0x40020c00
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40021400 	.word	0x40021400
 8000eb4:	40021800 	.word	0x40021800
 8000eb8:	40021c00 	.word	0x40021c00
 8000ebc:	40013c00 	.word	0x40013c00

08000ec0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	041a      	lsls	r2, r3, #16
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43d9      	mvns	r1, r3
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	619a      	str	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e267      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d075      	beq.n	8000ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f12:	4b88      	ldr	r3, [pc, #544]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d00c      	beq.n	8000f38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1e:	4b85      	ldr	r3, [pc, #532]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f26:	2b08      	cmp	r3, #8
 8000f28:	d112      	bne.n	8000f50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f2a:	4b82      	ldr	r3, [pc, #520]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f36:	d10b      	bne.n	8000f50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f38:	4b7e      	ldr	r3, [pc, #504]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d05b      	beq.n	8000ffc <HAL_RCC_OscConfig+0x108>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d157      	bne.n	8000ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e242      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f58:	d106      	bne.n	8000f68 <HAL_RCC_OscConfig+0x74>
 8000f5a:	4b76      	ldr	r3, [pc, #472]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a75      	ldr	r2, [pc, #468]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e01d      	b.n	8000fa4 <HAL_RCC_OscConfig+0xb0>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f70:	d10c      	bne.n	8000f8c <HAL_RCC_OscConfig+0x98>
 8000f72:	4b70      	ldr	r3, [pc, #448]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a6f      	ldr	r2, [pc, #444]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a6c      	ldr	r2, [pc, #432]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e00b      	b.n	8000fa4 <HAL_RCC_OscConfig+0xb0>
 8000f8c:	4b69      	ldr	r3, [pc, #420]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a68      	ldr	r2, [pc, #416]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b66      	ldr	r3, [pc, #408]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a65      	ldr	r2, [pc, #404]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d013      	beq.n	8000fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fcda 	bl	8000964 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fcd6 	bl	8000964 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b64      	cmp	r3, #100	@ 0x64
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e207      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0xc0>
 8000fd2:	e014      	b.n	8000ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fcc6 	bl	8000964 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fcc2 	bl	8000964 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b64      	cmp	r3, #100	@ 0x64
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e1f3      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fee:	4b51      	ldr	r3, [pc, #324]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0xe8>
 8000ffa:	e000      	b.n	8000ffe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d063      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800100a:	4b4a      	ldr	r3, [pc, #296]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00b      	beq.n	800102e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001016:	4b47      	ldr	r3, [pc, #284]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800101e:	2b08      	cmp	r3, #8
 8001020:	d11c      	bne.n	800105c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001022:	4b44      	ldr	r3, [pc, #272]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d116      	bne.n	800105c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102e:	4b41      	ldr	r3, [pc, #260]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <HAL_RCC_OscConfig+0x152>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d001      	beq.n	8001046 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e1c7      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001046:	4b3b      	ldr	r3, [pc, #236]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4937      	ldr	r1, [pc, #220]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	e03a      	b.n	80010d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d020      	beq.n	80010a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001064:	4b34      	ldr	r3, [pc, #208]	@ (8001138 <HAL_RCC_OscConfig+0x244>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106a:	f7ff fc7b 	bl	8000964 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001072:	f7ff fc77 	bl	8000964 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e1a8      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001084:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	4925      	ldr	r1, [pc, #148]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
 80010a4:	e015      	b.n	80010d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a6:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <HAL_RCC_OscConfig+0x244>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ac:	f7ff fc5a 	bl	8000964 <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b4:	f7ff fc56 	bl	8000964 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e187      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f0      	bne.n	80010b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d036      	beq.n	800114c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d016      	beq.n	8001114 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_RCC_OscConfig+0x248>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ec:	f7ff fc3a 	bl	8000964 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f4:	f7ff fc36 	bl	8000964 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e167      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <HAL_RCC_OscConfig+0x240>)
 8001108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0x200>
 8001112:	e01b      	b.n	800114c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <HAL_RCC_OscConfig+0x248>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111a:	f7ff fc23 	bl	8000964 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001120:	e00e      	b.n	8001140 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001122:	f7ff fc1f 	bl	8000964 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d907      	bls.n	8001140 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e150      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
 8001134:	40023800 	.word	0x40023800
 8001138:	42470000 	.word	0x42470000
 800113c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001140:	4b88      	ldr	r3, [pc, #544]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1ea      	bne.n	8001122 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 8097 	beq.w	8001288 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115e:	4b81      	ldr	r3, [pc, #516]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10f      	bne.n	800118a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b7d      	ldr	r3, [pc, #500]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	4a7c      	ldr	r2, [pc, #496]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	@ 0x40
 800117a:	4b7a      	ldr	r3, [pc, #488]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001186:	2301      	movs	r3, #1
 8001188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118a:	4b77      	ldr	r3, [pc, #476]	@ (8001368 <HAL_RCC_OscConfig+0x474>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001192:	2b00      	cmp	r3, #0
 8001194:	d118      	bne.n	80011c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001196:	4b74      	ldr	r3, [pc, #464]	@ (8001368 <HAL_RCC_OscConfig+0x474>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a73      	ldr	r2, [pc, #460]	@ (8001368 <HAL_RCC_OscConfig+0x474>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011a2:	f7ff fbdf 	bl	8000964 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011aa:	f7ff fbdb 	bl	8000964 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e10c      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001368 <HAL_RCC_OscConfig+0x474>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d106      	bne.n	80011de <HAL_RCC_OscConfig+0x2ea>
 80011d0:	4b64      	ldr	r3, [pc, #400]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80011d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011d4:	4a63      	ldr	r2, [pc, #396]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6713      	str	r3, [r2, #112]	@ 0x70
 80011dc:	e01c      	b.n	8001218 <HAL_RCC_OscConfig+0x324>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0x30c>
 80011e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80011e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80011f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80011f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80011fe:	e00b      	b.n	8001218 <HAL_RCC_OscConfig+0x324>
 8001200:	4b58      	ldr	r3, [pc, #352]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001204:	4a57      	ldr	r2, [pc, #348]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001206:	f023 0301 	bic.w	r3, r3, #1
 800120a:	6713      	str	r3, [r2, #112]	@ 0x70
 800120c:	4b55      	ldr	r3, [pc, #340]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 800120e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001210:	4a54      	ldr	r2, [pc, #336]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001212:	f023 0304 	bic.w	r3, r3, #4
 8001216:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d015      	beq.n	800124c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001220:	f7ff fba0 	bl	8000964 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001226:	e00a      	b.n	800123e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001228:	f7ff fb9c 	bl	8000964 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e0cb      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123e:	4b49      	ldr	r3, [pc, #292]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0ee      	beq.n	8001228 <HAL_RCC_OscConfig+0x334>
 800124a:	e014      	b.n	8001276 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124c:	f7ff fb8a 	bl	8000964 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001252:	e00a      	b.n	800126a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001254:	f7ff fb86 	bl	8000964 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e0b5      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126a:	4b3e      	ldr	r3, [pc, #248]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 800126c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1ee      	bne.n	8001254 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d105      	bne.n	8001288 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800127c:	4b39      	ldr	r3, [pc, #228]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	4a38      	ldr	r2, [pc, #224]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001286:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80a1 	beq.w	80013d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001292:	4b34      	ldr	r3, [pc, #208]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b08      	cmp	r3, #8
 800129c:	d05c      	beq.n	8001358 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d141      	bne.n	800132a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a6:	4b31      	ldr	r3, [pc, #196]	@ (800136c <HAL_RCC_OscConfig+0x478>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fb5a 	bl	8000964 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b4:	f7ff fb56 	bl	8000964 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e087      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c6:	4b27      	ldr	r3, [pc, #156]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69da      	ldr	r2, [r3, #28]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e0:	019b      	lsls	r3, r3, #6
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	3b01      	subs	r3, #1
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f4:	061b      	lsls	r3, r3, #24
 80012f6:	491b      	ldr	r1, [pc, #108]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <HAL_RCC_OscConfig+0x478>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001302:	f7ff fb2f 	bl	8000964 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff fb2b 	bl	8000964 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e05c      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x416>
 8001328:	e054      	b.n	80013d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <HAL_RCC_OscConfig+0x478>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fb18 	bl	8000964 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001338:	f7ff fb14 	bl	8000964 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e045      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_RCC_OscConfig+0x470>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x444>
 8001356:	e03d      	b.n	80013d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d107      	bne.n	8001370 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e038      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
 8001364:	40023800 	.word	0x40023800
 8001368:	40007000 	.word	0x40007000
 800136c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001370:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <HAL_RCC_OscConfig+0x4ec>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d028      	beq.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001388:	429a      	cmp	r2, r3
 800138a:	d121      	bne.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d11a      	bne.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013a0:	4013      	ands	r3, r2
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d111      	bne.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	3b01      	subs	r3, #1
 80013ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d107      	bne.n	80013d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800

080013e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0cc      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013f8:	4b68      	ldr	r3, [pc, #416]	@ (800159c <HAL_RCC_ClockConfig+0x1b8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d90c      	bls.n	8001420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b65      	ldr	r3, [pc, #404]	@ (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800140e:	4b63      	ldr	r3, [pc, #396]	@ (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0b8      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001438:	4b59      	ldr	r3, [pc, #356]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a58      	ldr	r2, [pc, #352]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001442:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001450:	4b53      	ldr	r3, [pc, #332]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a52      	ldr	r2, [pc, #328]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800145a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800145c:	4b50      	ldr	r3, [pc, #320]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	494d      	ldr	r1, [pc, #308]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	4313      	orrs	r3, r2
 800146c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d044      	beq.n	8001504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d107      	bne.n	8001492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b47      	ldr	r3, [pc, #284]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d119      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e07f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d003      	beq.n	80014a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a2:	4b3f      	ldr	r3, [pc, #252]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e06f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b2:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e067      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c2:	4b37      	ldr	r3, [pc, #220]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f023 0203 	bic.w	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4934      	ldr	r1, [pc, #208]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d4:	f7ff fa46 	bl	8000964 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	e00a      	b.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014dc:	f7ff fa42 	bl	8000964 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e04f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 020c 	and.w	r2, r3, #12
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	429a      	cmp	r2, r3
 8001502:	d1eb      	bne.n	80014dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001504:	4b25      	ldr	r3, [pc, #148]	@ (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d20c      	bcs.n	800152c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b22      	ldr	r3, [pc, #136]	@ (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e032      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4916      	ldr	r1, [pc, #88]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	4313      	orrs	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001556:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	490e      	ldr	r1, [pc, #56]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800156a:	f000 f821 	bl	80015b0 <HAL_RCC_GetSysClockFreq>
 800156e:	4602      	mov	r2, r0
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	490a      	ldr	r1, [pc, #40]	@ (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 800157c:	5ccb      	ldrb	r3, [r1, r3]
 800157e:	fa22 f303 	lsr.w	r3, r2, r3
 8001582:	4a09      	ldr	r2, [pc, #36]	@ (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <HAL_RCC_ClockConfig+0x1c8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f8e0 	bl	8000750 <HAL_InitTick>

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023c00 	.word	0x40023c00
 80015a0:	40023800 	.word	0x40023800
 80015a4:	08002558 	.word	0x08002558
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015b4:	b090      	sub	sp, #64	@ 0x40
 80015b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015c8:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d00d      	beq.n	80015f0 <HAL_RCC_GetSysClockFreq+0x40>
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	f200 80a1 	bhi.w	800171c <HAL_RCC_GetSysClockFreq+0x16c>
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0x34>
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d003      	beq.n	80015ea <HAL_RCC_GetSysClockFreq+0x3a>
 80015e2:	e09b      	b.n	800171c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015e4:	4b53      	ldr	r3, [pc, #332]	@ (8001734 <HAL_RCC_GetSysClockFreq+0x184>)
 80015e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015e8:	e09b      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015ea:	4b53      	ldr	r3, [pc, #332]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x188>)
 80015ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015ee:	e098      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f0:	4b4f      	ldr	r3, [pc, #316]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x180>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x180>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d028      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001606:	4b4a      	ldr	r3, [pc, #296]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x180>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	099b      	lsrs	r3, r3, #6
 800160c:	2200      	movs	r2, #0
 800160e:	623b      	str	r3, [r7, #32]
 8001610:	627a      	str	r2, [r7, #36]	@ 0x24
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001618:	2100      	movs	r1, #0
 800161a:	4b47      	ldr	r3, [pc, #284]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x188>)
 800161c:	fb03 f201 	mul.w	r2, r3, r1
 8001620:	2300      	movs	r3, #0
 8001622:	fb00 f303 	mul.w	r3, r0, r3
 8001626:	4413      	add	r3, r2
 8001628:	4a43      	ldr	r2, [pc, #268]	@ (8001738 <HAL_RCC_GetSysClockFreq+0x188>)
 800162a:	fba0 1202 	umull	r1, r2, r0, r2
 800162e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001630:	460a      	mov	r2, r1
 8001632:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001636:	4413      	add	r3, r2
 8001638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800163a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800163c:	2200      	movs	r2, #0
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	61fa      	str	r2, [r7, #28]
 8001642:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001646:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800164a:	f7fe fdbd 	bl	80001c8 <__aeabi_uldivmod>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4613      	mov	r3, r2
 8001654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001656:	e053      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001658:	4b35      	ldr	r3, [pc, #212]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x180>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	2200      	movs	r2, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	617a      	str	r2, [r7, #20]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800166a:	f04f 0b00 	mov.w	fp, #0
 800166e:	4652      	mov	r2, sl
 8001670:	465b      	mov	r3, fp
 8001672:	f04f 0000 	mov.w	r0, #0
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	0159      	lsls	r1, r3, #5
 800167c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001680:	0150      	lsls	r0, r2, #5
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	ebb2 080a 	subs.w	r8, r2, sl
 800168a:	eb63 090b 	sbc.w	r9, r3, fp
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800169a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800169e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016a2:	ebb2 0408 	subs.w	r4, r2, r8
 80016a6:	eb63 0509 	sbc.w	r5, r3, r9
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	00eb      	lsls	r3, r5, #3
 80016b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016b8:	00e2      	lsls	r2, r4, #3
 80016ba:	4614      	mov	r4, r2
 80016bc:	461d      	mov	r5, r3
 80016be:	eb14 030a 	adds.w	r3, r4, sl
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	eb45 030b 	adc.w	r3, r5, fp
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016d6:	4629      	mov	r1, r5
 80016d8:	028b      	lsls	r3, r1, #10
 80016da:	4621      	mov	r1, r4
 80016dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016e0:	4621      	mov	r1, r4
 80016e2:	028a      	lsls	r2, r1, #10
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016ea:	2200      	movs	r2, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	60fa      	str	r2, [r7, #12]
 80016f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016f4:	f7fe fd68 	bl	80001c8 <__aeabi_uldivmod>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4613      	mov	r3, r2
 80016fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_RCC_GetSysClockFreq+0x180>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	0c1b      	lsrs	r3, r3, #16
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	3301      	adds	r3, #1
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001710:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001714:	fbb2 f3f3 	udiv	r3, r2, r3
 8001718:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800171a:	e002      	b.n	8001722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_RCC_GetSysClockFreq+0x184>)
 800171e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001724:	4618      	mov	r0, r3
 8001726:	3740      	adds	r7, #64	@ 0x40
 8001728:	46bd      	mov	sp, r7
 800172a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	00f42400 	.word	0x00f42400
 8001738:	017d7840 	.word	0x017d7840

0800173c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001740:	4b03      	ldr	r3, [pc, #12]	@ (8001750 <HAL_RCC_GetHCLKFreq+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000000 	.word	0x20000000

08001754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001758:	f7ff fff0 	bl	800173c <HAL_RCC_GetHCLKFreq>
 800175c:	4602      	mov	r2, r0
 800175e:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	0a9b      	lsrs	r3, r3, #10
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	4903      	ldr	r1, [pc, #12]	@ (8001778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800176a:	5ccb      	ldrb	r3, [r1, r3]
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800
 8001778:	08002568 	.word	0x08002568

0800177c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001780:	f7ff ffdc 	bl	800173c <HAL_RCC_GetHCLKFreq>
 8001784:	4602      	mov	r2, r0
 8001786:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	0b5b      	lsrs	r3, r3, #13
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	4903      	ldr	r1, [pc, #12]	@ (80017a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001792:	5ccb      	ldrb	r3, [r1, r3]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001798:	4618      	mov	r0, r3
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	08002568 	.word	0x08002568

080017a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	220f      	movs	r2, #15
 80017b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017b4:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_RCC_GetClockConfig+0x5c>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0203 	and.w	r2, r3, #3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <HAL_RCC_GetClockConfig+0x5c>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_RCC_GetClockConfig+0x5c>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_RCC_GetClockConfig+0x5c>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017e6:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <HAL_RCC_GetClockConfig+0x60>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0207 	and.w	r2, r3, #7
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	601a      	str	r2, [r3, #0]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40023c00 	.word	0x40023c00

08001808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e041      	b.n	800189e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f839 	bl	80018a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2202      	movs	r2, #2
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3304      	adds	r3, #4
 8001844:	4619      	mov	r1, r3
 8001846:	4610      	mov	r0, r2
 8001848:	f000 f9c0 	bl	8001bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d001      	beq.n	80018d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e04e      	b.n	8001972 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a23      	ldr	r2, [pc, #140]	@ (8001980 <HAL_TIM_Base_Start_IT+0xc4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d022      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x80>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018fe:	d01d      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x80>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1f      	ldr	r2, [pc, #124]	@ (8001984 <HAL_TIM_Base_Start_IT+0xc8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d018      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x80>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1e      	ldr	r2, [pc, #120]	@ (8001988 <HAL_TIM_Base_Start_IT+0xcc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d013      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x80>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1c      	ldr	r2, [pc, #112]	@ (800198c <HAL_TIM_Base_Start_IT+0xd0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00e      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x80>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a1b      	ldr	r2, [pc, #108]	@ (8001990 <HAL_TIM_Base_Start_IT+0xd4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d009      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x80>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a19      	ldr	r2, [pc, #100]	@ (8001994 <HAL_TIM_Base_Start_IT+0xd8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d004      	beq.n	800193c <HAL_TIM_Base_Start_IT+0x80>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a18      	ldr	r2, [pc, #96]	@ (8001998 <HAL_TIM_Base_Start_IT+0xdc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d111      	bne.n	8001960 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b06      	cmp	r3, #6
 800194c:	d010      	beq.n	8001970 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0201 	orr.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195e:	e007      	b.n	8001970 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40010000 	.word	0x40010000
 8001984:	40000400 	.word	0x40000400
 8001988:	40000800 	.word	0x40000800
 800198c:	40000c00 	.word	0x40000c00
 8001990:	40010400 	.word	0x40010400
 8001994:	40014000 	.word	0x40014000
 8001998:	40001800 	.word	0x40001800

0800199c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d020      	beq.n	8001a00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d01b      	beq.n	8001a00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0202 	mvn.w	r2, #2
 80019d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f8d2 	bl	8001b90 <HAL_TIM_IC_CaptureCallback>
 80019ec:	e005      	b.n	80019fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f8c4 	bl	8001b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f8d5 	bl	8001ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d020      	beq.n	8001a4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01b      	beq.n	8001a4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f06f 0204 	mvn.w	r2, #4
 8001a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2202      	movs	r2, #2
 8001a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f8ac 	bl	8001b90 <HAL_TIM_IC_CaptureCallback>
 8001a38:	e005      	b.n	8001a46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f89e 	bl	8001b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f8af 	bl	8001ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d020      	beq.n	8001a98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01b      	beq.n	8001a98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f06f 0208 	mvn.w	r2, #8
 8001a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f886 	bl	8001b90 <HAL_TIM_IC_CaptureCallback>
 8001a84:	e005      	b.n	8001a92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f878 	bl	8001b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f889 	bl	8001ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d020      	beq.n	8001ae4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01b      	beq.n	8001ae4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f06f 0210 	mvn.w	r2, #16
 8001ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2208      	movs	r2, #8
 8001aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f860 	bl	8001b90 <HAL_TIM_IC_CaptureCallback>
 8001ad0:	e005      	b.n	8001ade <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f852 	bl	8001b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f863 	bl	8001ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00c      	beq.n	8001b08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d007      	beq.n	8001b08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0201 	mvn.w	r2, #1
 8001b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7fe fd9c 	bl	8000640 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f906 	bl	8001d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00c      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f834 	bl	8001bb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00c      	beq.n	8001b74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f06f 0220 	mvn.w	r2, #32
 8001b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f8d8 	bl	8001d24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a46      	ldr	r2, [pc, #280]	@ (8001cf8 <TIM_Base_SetConfig+0x12c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bea:	d00f      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a43      	ldr	r2, [pc, #268]	@ (8001cfc <TIM_Base_SetConfig+0x130>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00b      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a42      	ldr	r2, [pc, #264]	@ (8001d00 <TIM_Base_SetConfig+0x134>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d007      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a41      	ldr	r2, [pc, #260]	@ (8001d04 <TIM_Base_SetConfig+0x138>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d003      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a40      	ldr	r2, [pc, #256]	@ (8001d08 <TIM_Base_SetConfig+0x13c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d108      	bne.n	8001c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a35      	ldr	r2, [pc, #212]	@ (8001cf8 <TIM_Base_SetConfig+0x12c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d02b      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c2c:	d027      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a32      	ldr	r2, [pc, #200]	@ (8001cfc <TIM_Base_SetConfig+0x130>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d023      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a31      	ldr	r2, [pc, #196]	@ (8001d00 <TIM_Base_SetConfig+0x134>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d01f      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a30      	ldr	r2, [pc, #192]	@ (8001d04 <TIM_Base_SetConfig+0x138>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01b      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a2f      	ldr	r2, [pc, #188]	@ (8001d08 <TIM_Base_SetConfig+0x13c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d017      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a2e      	ldr	r2, [pc, #184]	@ (8001d0c <TIM_Base_SetConfig+0x140>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a2d      	ldr	r2, [pc, #180]	@ (8001d10 <TIM_Base_SetConfig+0x144>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00f      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a2c      	ldr	r2, [pc, #176]	@ (8001d14 <TIM_Base_SetConfig+0x148>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00b      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a2b      	ldr	r2, [pc, #172]	@ (8001d18 <TIM_Base_SetConfig+0x14c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a2a      	ldr	r2, [pc, #168]	@ (8001d1c <TIM_Base_SetConfig+0x150>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d003      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a29      	ldr	r2, [pc, #164]	@ (8001d20 <TIM_Base_SetConfig+0x154>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d108      	bne.n	8001c90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a10      	ldr	r2, [pc, #64]	@ (8001cf8 <TIM_Base_SetConfig+0x12c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d003      	beq.n	8001cc4 <TIM_Base_SetConfig+0xf8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <TIM_Base_SetConfig+0x13c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d103      	bne.n	8001ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f023 0201 	bic.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	611a      	str	r2, [r3, #16]
  }
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	40000800 	.word	0x40000800
 8001d04:	40000c00 	.word	0x40000c00
 8001d08:	40010400 	.word	0x40010400
 8001d0c:	40014000 	.word	0x40014000
 8001d10:	40014400 	.word	0x40014400
 8001d14:	40014800 	.word	0x40014800
 8001d18:	40001800 	.word	0x40001800
 8001d1c:	40001c00 	.word	0x40001c00
 8001d20:	40002000 	.word	0x40002000

08001d24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e042      	b.n	8001de4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fca4 	bl	80006c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2224      	movs	r2, #36	@ 0x24
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f82b 	bl	8001dec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001df0:	b0c0      	sub	sp, #256	@ 0x100
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e08:	68d9      	ldr	r1, [r3, #12]
 8001e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	ea40 0301 	orr.w	r3, r0, r1
 8001e14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001e44:	f021 010c 	bic.w	r1, r1, #12
 8001e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001e52:	430b      	orrs	r3, r1
 8001e54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e66:	6999      	ldr	r1, [r3, #24]
 8001e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	ea40 0301 	orr.w	r3, r0, r1
 8001e72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	4b8f      	ldr	r3, [pc, #572]	@ (80020b8 <UART_SetConfig+0x2cc>)
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d005      	beq.n	8001e8c <UART_SetConfig+0xa0>
 8001e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4b8d      	ldr	r3, [pc, #564]	@ (80020bc <UART_SetConfig+0x2d0>)
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d104      	bne.n	8001e96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e8c:	f7ff fc76 	bl	800177c <HAL_RCC_GetPCLK2Freq>
 8001e90:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001e94:	e003      	b.n	8001e9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e96:	f7ff fc5d 	bl	8001754 <HAL_RCC_GetPCLK1Freq>
 8001e9a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ea8:	f040 810c 	bne.w	80020c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001eb6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001eba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001ebe:	4622      	mov	r2, r4
 8001ec0:	462b      	mov	r3, r5
 8001ec2:	1891      	adds	r1, r2, r2
 8001ec4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001ec6:	415b      	adcs	r3, r3
 8001ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001eca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ece:	4621      	mov	r1, r4
 8001ed0:	eb12 0801 	adds.w	r8, r2, r1
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	eb43 0901 	adc.w	r9, r3, r1
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ee6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eee:	4690      	mov	r8, r2
 8001ef0:	4699      	mov	r9, r3
 8001ef2:	4623      	mov	r3, r4
 8001ef4:	eb18 0303 	adds.w	r3, r8, r3
 8001ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001efc:	462b      	mov	r3, r5
 8001efe:	eb49 0303 	adc.w	r3, r9, r3
 8001f02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001f12:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001f16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	18db      	adds	r3, r3, r3
 8001f1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f20:	4613      	mov	r3, r2
 8001f22:	eb42 0303 	adc.w	r3, r2, r3
 8001f26:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001f30:	f7fe f94a 	bl	80001c8 <__aeabi_uldivmod>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4b61      	ldr	r3, [pc, #388]	@ (80020c0 <UART_SetConfig+0x2d4>)
 8001f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	011c      	lsls	r4, r3, #4
 8001f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f46:	2200      	movs	r2, #0
 8001f48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f4c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001f50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001f54:	4642      	mov	r2, r8
 8001f56:	464b      	mov	r3, r9
 8001f58:	1891      	adds	r1, r2, r2
 8001f5a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001f5c:	415b      	adcs	r3, r3
 8001f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f64:	4641      	mov	r1, r8
 8001f66:	eb12 0a01 	adds.w	sl, r2, r1
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	eb43 0b01 	adc.w	fp, r3, r1
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f84:	4692      	mov	sl, r2
 8001f86:	469b      	mov	fp, r3
 8001f88:	4643      	mov	r3, r8
 8001f8a:	eb1a 0303 	adds.w	r3, sl, r3
 8001f8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f92:	464b      	mov	r3, r9
 8001f94:	eb4b 0303 	adc.w	r3, fp, r3
 8001f98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001fa8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001fac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	18db      	adds	r3, r3, r3
 8001fb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	eb42 0303 	adc.w	r3, r2, r3
 8001fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001fc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001fc6:	f7fe f8ff 	bl	80001c8 <__aeabi_uldivmod>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80020c0 <UART_SetConfig+0x2d4>)
 8001fd2:	fba3 2301 	umull	r2, r3, r3, r1
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2264      	movs	r2, #100	@ 0x64
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	1acb      	subs	r3, r1, r3
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001fe6:	4b36      	ldr	r3, [pc, #216]	@ (80020c0 <UART_SetConfig+0x2d4>)
 8001fe8:	fba3 2302 	umull	r2, r3, r3, r2
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001ff4:	441c      	add	r4, r3
 8001ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002000:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002004:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002008:	4642      	mov	r2, r8
 800200a:	464b      	mov	r3, r9
 800200c:	1891      	adds	r1, r2, r2
 800200e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002010:	415b      	adcs	r3, r3
 8002012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002014:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002018:	4641      	mov	r1, r8
 800201a:	1851      	adds	r1, r2, r1
 800201c:	6339      	str	r1, [r7, #48]	@ 0x30
 800201e:	4649      	mov	r1, r9
 8002020:	414b      	adcs	r3, r1
 8002022:	637b      	str	r3, [r7, #52]	@ 0x34
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002030:	4659      	mov	r1, fp
 8002032:	00cb      	lsls	r3, r1, #3
 8002034:	4651      	mov	r1, sl
 8002036:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800203a:	4651      	mov	r1, sl
 800203c:	00ca      	lsls	r2, r1, #3
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	4603      	mov	r3, r0
 8002044:	4642      	mov	r2, r8
 8002046:	189b      	adds	r3, r3, r2
 8002048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800204c:	464b      	mov	r3, r9
 800204e:	460a      	mov	r2, r1
 8002050:	eb42 0303 	adc.w	r3, r2, r3
 8002054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002064:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002068:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800206c:	460b      	mov	r3, r1
 800206e:	18db      	adds	r3, r3, r3
 8002070:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002072:	4613      	mov	r3, r2
 8002074:	eb42 0303 	adc.w	r3, r2, r3
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800207a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800207e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002082:	f7fe f8a1 	bl	80001c8 <__aeabi_uldivmod>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <UART_SetConfig+0x2d4>)
 800208c:	fba3 1302 	umull	r1, r3, r3, r2
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	2164      	movs	r1, #100	@ 0x64
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	3332      	adds	r3, #50	@ 0x32
 800209e:	4a08      	ldr	r2, [pc, #32]	@ (80020c0 <UART_SetConfig+0x2d4>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	f003 0207 	and.w	r2, r3, #7
 80020aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4422      	add	r2, r4
 80020b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020b4:	e106      	b.n	80022c4 <UART_SetConfig+0x4d8>
 80020b6:	bf00      	nop
 80020b8:	40011000 	.word	0x40011000
 80020bc:	40011400 	.word	0x40011400
 80020c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020c8:	2200      	movs	r2, #0
 80020ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80020ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80020d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80020d6:	4642      	mov	r2, r8
 80020d8:	464b      	mov	r3, r9
 80020da:	1891      	adds	r1, r2, r2
 80020dc:	6239      	str	r1, [r7, #32]
 80020de:	415b      	adcs	r3, r3
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020e6:	4641      	mov	r1, r8
 80020e8:	1854      	adds	r4, r2, r1
 80020ea:	4649      	mov	r1, r9
 80020ec:	eb43 0501 	adc.w	r5, r3, r1
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	00eb      	lsls	r3, r5, #3
 80020fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020fe:	00e2      	lsls	r2, r4, #3
 8002100:	4614      	mov	r4, r2
 8002102:	461d      	mov	r5, r3
 8002104:	4643      	mov	r3, r8
 8002106:	18e3      	adds	r3, r4, r3
 8002108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800210c:	464b      	mov	r3, r9
 800210e:	eb45 0303 	adc.w	r3, r5, r3
 8002112:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002122:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002132:	4629      	mov	r1, r5
 8002134:	008b      	lsls	r3, r1, #2
 8002136:	4621      	mov	r1, r4
 8002138:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800213c:	4621      	mov	r1, r4
 800213e:	008a      	lsls	r2, r1, #2
 8002140:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002144:	f7fe f840 	bl	80001c8 <__aeabi_uldivmod>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4b60      	ldr	r3, [pc, #384]	@ (80022d0 <UART_SetConfig+0x4e4>)
 800214e:	fba3 2302 	umull	r2, r3, r3, r2
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	011c      	lsls	r4, r3, #4
 8002156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800215a:	2200      	movs	r2, #0
 800215c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002160:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002164:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002168:	4642      	mov	r2, r8
 800216a:	464b      	mov	r3, r9
 800216c:	1891      	adds	r1, r2, r2
 800216e:	61b9      	str	r1, [r7, #24]
 8002170:	415b      	adcs	r3, r3
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002178:	4641      	mov	r1, r8
 800217a:	1851      	adds	r1, r2, r1
 800217c:	6139      	str	r1, [r7, #16]
 800217e:	4649      	mov	r1, r9
 8002180:	414b      	adcs	r3, r1
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002190:	4659      	mov	r1, fp
 8002192:	00cb      	lsls	r3, r1, #3
 8002194:	4651      	mov	r1, sl
 8002196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800219a:	4651      	mov	r1, sl
 800219c:	00ca      	lsls	r2, r1, #3
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	4642      	mov	r2, r8
 80021a6:	189b      	adds	r3, r3, r2
 80021a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80021ac:	464b      	mov	r3, r9
 80021ae:	460a      	mov	r2, r1
 80021b0:	eb42 0303 	adc.w	r3, r2, r3
 80021b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80021b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80021d0:	4649      	mov	r1, r9
 80021d2:	008b      	lsls	r3, r1, #2
 80021d4:	4641      	mov	r1, r8
 80021d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021da:	4641      	mov	r1, r8
 80021dc:	008a      	lsls	r2, r1, #2
 80021de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80021e2:	f7fd fff1 	bl	80001c8 <__aeabi_uldivmod>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4611      	mov	r1, r2
 80021ec:	4b38      	ldr	r3, [pc, #224]	@ (80022d0 <UART_SetConfig+0x4e4>)
 80021ee:	fba3 2301 	umull	r2, r3, r3, r1
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2264      	movs	r2, #100	@ 0x64
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	1acb      	subs	r3, r1, r3
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	3332      	adds	r3, #50	@ 0x32
 8002200:	4a33      	ldr	r2, [pc, #204]	@ (80022d0 <UART_SetConfig+0x4e4>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800220c:	441c      	add	r4, r3
 800220e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002212:	2200      	movs	r2, #0
 8002214:	673b      	str	r3, [r7, #112]	@ 0x70
 8002216:	677a      	str	r2, [r7, #116]	@ 0x74
 8002218:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800221c:	4642      	mov	r2, r8
 800221e:	464b      	mov	r3, r9
 8002220:	1891      	adds	r1, r2, r2
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	415b      	adcs	r3, r3
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800222c:	4641      	mov	r1, r8
 800222e:	1851      	adds	r1, r2, r1
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	4649      	mov	r1, r9
 8002234:	414b      	adcs	r3, r1
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002244:	4659      	mov	r1, fp
 8002246:	00cb      	lsls	r3, r1, #3
 8002248:	4651      	mov	r1, sl
 800224a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800224e:	4651      	mov	r1, sl
 8002250:	00ca      	lsls	r2, r1, #3
 8002252:	4610      	mov	r0, r2
 8002254:	4619      	mov	r1, r3
 8002256:	4603      	mov	r3, r0
 8002258:	4642      	mov	r2, r8
 800225a:	189b      	adds	r3, r3, r2
 800225c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800225e:	464b      	mov	r3, r9
 8002260:	460a      	mov	r2, r1
 8002262:	eb42 0303 	adc.w	r3, r2, r3
 8002266:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	663b      	str	r3, [r7, #96]	@ 0x60
 8002272:	667a      	str	r2, [r7, #100]	@ 0x64
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002280:	4649      	mov	r1, r9
 8002282:	008b      	lsls	r3, r1, #2
 8002284:	4641      	mov	r1, r8
 8002286:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800228a:	4641      	mov	r1, r8
 800228c:	008a      	lsls	r2, r1, #2
 800228e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002292:	f7fd ff99 	bl	80001c8 <__aeabi_uldivmod>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <UART_SetConfig+0x4e4>)
 800229c:	fba3 1302 	umull	r1, r3, r3, r2
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	2164      	movs	r1, #100	@ 0x64
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	3332      	adds	r3, #50	@ 0x32
 80022ae:	4a08      	ldr	r2, [pc, #32]	@ (80022d0 <UART_SetConfig+0x4e4>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	f003 020f 	and.w	r2, r3, #15
 80022ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4422      	add	r2, r4
 80022c2:	609a      	str	r2, [r3, #8]
}
 80022c4:	bf00      	nop
 80022c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80022ca:	46bd      	mov	sp, r7
 80022cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022d0:	51eb851f 	.word	0x51eb851f

080022d4 <userTask1>:
#include "main.h"



void userTask1(void) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0

	while (1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80022d8:	2140      	movs	r1, #64	@ 0x40
 80022da:	4804      	ldr	r0, [pc, #16]	@ (80022ec <userTask1+0x18>)
 80022dc:	f7fe fdf0 	bl	8000ec0 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80022e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022e4:	f7fe fb4a 	bl	800097c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80022e8:	bf00      	nop
 80022ea:	e7f5      	b.n	80022d8 <userTask1+0x4>
 80022ec:	40020000 	.word	0x40020000

080022f0 <userTask2>:
	}
}


void userTask2(void) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0

	while (1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80022f4:	2180      	movs	r1, #128	@ 0x80
 80022f6:	4804      	ldr	r0, [pc, #16]	@ (8002308 <userTask2+0x18>)
 80022f8:	f7fe fde2 	bl	8000ec0 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80022fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002300:	f7fe fb3c 	bl	800097c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8002304:	bf00      	nop
 8002306:	e7f5      	b.n	80022f4 <userTask2+0x4>
 8002308:	40020000 	.word	0x40020000

0800230c <timeSlice_initSysTick>:
__attribute__((naked)) void timeSlice_initSchedStack(uint32_t stackTopAddr);
__attribute__((naked)) void timeSlice_switchToPSP(void);


// Private functions definitions
static void timeSlice_initSysTick(void) {
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

	/**
	 * Configuring sys-tick to have interrupt in every 1 ms
	 */
	SYSTICK->VAL  = 0;
 8002310:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <timeSlice_initSysTick+0x24>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
	SYSTICK->LOAD = (SYSCLK_FREQ / 1000) - 1;
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <timeSlice_initSysTick+0x24>)
 8002318:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800231c:	605a      	str	r2, [r3, #4]
	SYSTICK->CTRL = (1 << 0) | (1 << 1) | (1 << 2);
 800231e:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <timeSlice_initSysTick+0x24>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <timeSlice_initSchedStack>:


__attribute__((naked)) void timeSlice_initSchedStack(uint32_t stackTopAddr) {
 8002334:	4603      	mov	r3, r0

	/**
	 * MSP will be used for the task scheduler's stack pointer
	 * Scheduler runs in handler mode inside systick/pendsv ISR
	 */
	 __asm volatile("MSR MSP,%0": :  "r" (stackTopAddr)  :   );
 8002336:	f383 8808 	msr	MSP, r3
	 __asm volatile("BX LR");
 800233a:	4770      	bx	lr
}
 800233c:	bf00      	nop

0800233e <timeSlice_switchToPSP>:
	/**
	 * PSP will be used as stack pointer for user tasks
	 */

	// Store LR
	__asm volatile ("PUSH {LR}");
 800233e:	b500      	push	{lr}
	// Get curr stack pointer of first task
	__asm volatile ("BL timeSlice_getCurrTaskPSP");
 8002340:	f000 f87c 	bl	800243c <timeSlice_getCurrTaskPSP>
	// Load PSP with the obtained value
	__asm volatile ("MSR PSP,R0");
 8002344:	f380 8809 	msr	PSP, r0
	// Retrieve LR
	__asm volatile ("POP {LR}");
 8002348:	f85d eb04 	ldr.w	lr, [sp], #4
	// Change stack pointer to PSP from MSP
	__asm volatile ("MOV R0,#0X02");
 800234c:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 8002350:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 8002354:	4770      	bx	lr
}
 8002356:	bf00      	nop

08002358 <timeSlice_initTaskStack>:


static void timeSlice_initTaskStack(void) {
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0

	/**
	 * Filling each tasks private stacks with dummy stack frame
	 */
	uint32_t * ptrPSP = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]

	for (uint8_t i = 0; i < MAX_TASK; i++) {
 8002362:	2300      	movs	r3, #0
 8002364:	71fb      	strb	r3, [r7, #7]
 8002366:	e031      	b.n	80023cc <timeSlice_initTaskStack+0x74>

		ptrPSP = (uint32_t *) taskStackAddress[i];
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	4a1d      	ldr	r2, [pc, #116]	@ (80023e0 <timeSlice_initTaskStack+0x88>)
 800236c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002370:	603b      	str	r3, [r7, #0]

		*(ptrPSP - 1) = DUMMY_XPSR;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	3b04      	subs	r3, #4
 8002376:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800237a:	601a      	str	r2, [r3, #0]
		*(ptrPSP - 2) = (uint32_t) taskHandlerAddress[i];
 800237c:	79fa      	ldrb	r2, [r7, #7]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	3b08      	subs	r3, #8
 8002382:	4918      	ldr	r1, [pc, #96]	@ (80023e4 <timeSlice_initTaskStack+0x8c>)
 8002384:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002388:	601a      	str	r2, [r3, #0]
		*(ptrPSP - 3) = DUMMY_LR;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	3b0c      	subs	r3, #12
 800238e:	f06f 0202 	mvn.w	r2, #2
 8002392:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 13; i++) {
 8002394:	2300      	movs	r3, #0
 8002396:	71bb      	strb	r3, [r7, #6]
 8002398:	e00a      	b.n	80023b0 <timeSlice_initTaskStack+0x58>
			*(ptrPSP - (4+i)) = 0;
 800239a:	79bb      	ldrb	r3, [r7, #6]
 800239c:	3304      	adds	r3, #4
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	425b      	negs	r3, r3
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
		for (uint8_t i = 0; i < 13; i++) {
 80023aa:	79bb      	ldrb	r3, [r7, #6]
 80023ac:	3301      	adds	r3, #1
 80023ae:	71bb      	strb	r3, [r7, #6]
 80023b0:	79bb      	ldrb	r3, [r7, #6]
 80023b2:	2b0c      	cmp	r3, #12
 80023b4:	d9f1      	bls.n	800239a <timeSlice_initTaskStack+0x42>
		}
		taskStackAddress[i] = (uint32_t)(ptrPSP - 16);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f1a3 0240 	sub.w	r2, r3, #64	@ 0x40
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	4611      	mov	r1, r2
 80023c0:	4a07      	ldr	r2, [pc, #28]	@ (80023e0 <timeSlice_initTaskStack+0x88>)
 80023c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < MAX_TASK; i++) {
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	3301      	adds	r3, #1
 80023ca:	71fb      	strb	r3, [r7, #7]
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d9ca      	bls.n	8002368 <timeSlice_initTaskStack+0x10>
	}
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	2000000c 	.word	0x2000000c
 80023e4:	20000014 	.word	0x20000014

080023e8 <timeSlice_enableProcessorFaults>:


static void timeSlice_enableProcessorFaults(void) {
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

	/**
	 * Enabling memfault, busfault and usage fault
	 */
	SCB->SHCSR |= (1 << 16) | (1 << 17) | (1 << 18);
 80023ec:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <timeSlice_enableProcessorFaults+0x1c>)
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	4a04      	ldr	r2, [pc, #16]	@ (8002404 <timeSlice_enableProcessorFaults+0x1c>)
 80023f2:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80023f6:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000ed24 	.word	0xe000ed24

08002408 <timeSlice_setCurrTaskPSP>:


static void timeSlice_setCurrTaskPSP(uint32_t stackTopAddr) {
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

	if (currTaskIndex < MAX_TASK) {
 8002410:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <timeSlice_setCurrTaskPSP+0x2c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d806      	bhi.n	8002426 <timeSlice_setCurrTaskPSP+0x1e>
		taskStackAddress[currTaskIndex] = stackTopAddr;
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <timeSlice_setCurrTaskPSP+0x2c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	4a06      	ldr	r2, [pc, #24]	@ (8002438 <timeSlice_setCurrTaskPSP+0x30>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	200000cc 	.word	0x200000cc
 8002438:	2000000c 	.word	0x2000000c

0800243c <timeSlice_getCurrTaskPSP>:


static uint32_t timeSlice_getCurrTaskPSP(void) {
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

	if (currTaskIndex < MAX_TASK) {
 8002440:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <timeSlice_getCurrTaskPSP+0x28>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d806      	bhi.n	8002456 <timeSlice_getCurrTaskPSP+0x1a>
		return taskStackAddress[currTaskIndex];
 8002448:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <timeSlice_getCurrTaskPSP+0x28>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <timeSlice_getCurrTaskPSP+0x2c>)
 8002450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002454:	e000      	b.n	8002458 <timeSlice_getCurrTaskPSP+0x1c>
	}
	return 0;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	200000cc 	.word	0x200000cc
 8002468:	2000000c 	.word	0x2000000c

0800246c <timeSlice_updateNextTask>:


static void timeSlice_updateNextTask(void) {
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

	currTaskIndex++;
 8002470:	4b08      	ldr	r3, [pc, #32]	@ (8002494 <timeSlice_updateNextTask+0x28>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <timeSlice_updateNextTask+0x28>)
 800247a:	701a      	strb	r2, [r3, #0]
	currTaskIndex %= MAX_TASK;
 800247c:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <timeSlice_updateNextTask+0x28>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4b03      	ldr	r3, [pc, #12]	@ (8002494 <timeSlice_updateNextTask+0x28>)
 8002488:	701a      	strb	r2, [r3, #0]
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	200000cc 	.word	0x200000cc

08002498 <timeSlice_initScheduler>:



// Public functions definitions

void timeSlice_initScheduler(void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0

	timeSlice_enableProcessorFaults();
 800249c:	f7ff ffa4 	bl	80023e8 <timeSlice_enableProcessorFaults>
	timeSlice_initSysTick();
 80024a0:	f7ff ff34 	bl	800230c <timeSlice_initSysTick>
	timeSlice_initTaskStack();
 80024a4:	f7ff ff58 	bl	8002358 <timeSlice_initTaskStack>
	timeSlice_initSchedStack(SCHED_STACK_START_ADDR);
 80024a8:	4804      	ldr	r0, [pc, #16]	@ (80024bc <timeSlice_initScheduler+0x24>)
 80024aa:	f7ff ff43 	bl	8002334 <timeSlice_initSchedStack>
	timeSlice_switchToPSP();
 80024ae:	f7ff ff46 	bl	800233e <timeSlice_switchToPSP>
	userTask1();
 80024b2:	f7ff ff0f 	bl	80022d4 <userTask1>
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2001f400 	.word	0x2001f400

080024c0 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void) {

	/*Save the context of current task*/

	// Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 80024c0:	f3ef 8009 	mrs	r0, PSP
	// Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 80024c4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("PUSH {LR}");
 80024c8:	b500      	push	{lr}
	// Save the current value of PSP
	__asm volatile("BL timeSlice_setCurrTaskPSP");
 80024ca:	f7ff ff9d 	bl	8002408 <timeSlice_setCurrTaskPSP>

	/*Retrieve the context of next task */

	// Decide next task to run
	__asm volatile("BL timeSlice_updateNextTask");
 80024ce:	f7ff ffcd 	bl	800246c <timeSlice_updateNextTask>
	// Get it's PSP value
	__asm volatile ("BL timeSlice_getCurrTaskPSP");
 80024d2:	f7ff ffb3 	bl	800243c <timeSlice_getCurrTaskPSP>
	// Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 80024d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// Update PSP and exit
	__asm volatile("MSR PSP,R0");
 80024da:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80024de:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 80024e2:	4770      	bx	lr
}
 80024e4:	bf00      	nop

080024e6 <memset>:
 80024e6:	4402      	add	r2, r0
 80024e8:	4603      	mov	r3, r0
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d100      	bne.n	80024f0 <memset+0xa>
 80024ee:	4770      	bx	lr
 80024f0:	f803 1b01 	strb.w	r1, [r3], #1
 80024f4:	e7f9      	b.n	80024ea <memset+0x4>
	...

080024f8 <__libc_init_array>:
 80024f8:	b570      	push	{r4, r5, r6, lr}
 80024fa:	4d0d      	ldr	r5, [pc, #52]	@ (8002530 <__libc_init_array+0x38>)
 80024fc:	4c0d      	ldr	r4, [pc, #52]	@ (8002534 <__libc_init_array+0x3c>)
 80024fe:	1b64      	subs	r4, r4, r5
 8002500:	10a4      	asrs	r4, r4, #2
 8002502:	2600      	movs	r6, #0
 8002504:	42a6      	cmp	r6, r4
 8002506:	d109      	bne.n	800251c <__libc_init_array+0x24>
 8002508:	4d0b      	ldr	r5, [pc, #44]	@ (8002538 <__libc_init_array+0x40>)
 800250a:	4c0c      	ldr	r4, [pc, #48]	@ (800253c <__libc_init_array+0x44>)
 800250c:	f000 f818 	bl	8002540 <_init>
 8002510:	1b64      	subs	r4, r4, r5
 8002512:	10a4      	asrs	r4, r4, #2
 8002514:	2600      	movs	r6, #0
 8002516:	42a6      	cmp	r6, r4
 8002518:	d105      	bne.n	8002526 <__libc_init_array+0x2e>
 800251a:	bd70      	pop	{r4, r5, r6, pc}
 800251c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002520:	4798      	blx	r3
 8002522:	3601      	adds	r6, #1
 8002524:	e7ee      	b.n	8002504 <__libc_init_array+0xc>
 8002526:	f855 3b04 	ldr.w	r3, [r5], #4
 800252a:	4798      	blx	r3
 800252c:	3601      	adds	r6, #1
 800252e:	e7f2      	b.n	8002516 <__libc_init_array+0x1e>
 8002530:	08002578 	.word	0x08002578
 8002534:	08002578 	.word	0x08002578
 8002538:	08002578 	.word	0x08002578
 800253c:	0800257c 	.word	0x0800257c

08002540 <_init>:
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002542:	bf00      	nop
 8002544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002546:	bc08      	pop	{r3}
 8002548:	469e      	mov	lr, r3
 800254a:	4770      	bx	lr

0800254c <_fini>:
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254e:	bf00      	nop
 8002550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002552:	bc08      	pop	{r3}
 8002554:	469e      	mov	lr, r3
 8002556:	4770      	bx	lr
